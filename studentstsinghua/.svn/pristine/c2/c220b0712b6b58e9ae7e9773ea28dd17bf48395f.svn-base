package com.qq.weixin.sdk;

import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.xml.sax.SAXException;

import com.qq.weixin.sdk.message.IMessage;
import com.qq.weixin.sdk.message.Message;
import com.qq.weixin.sdk.message.MessageEvent;
import com.qq.weixin.sdk.message.MessageImage;
import com.qq.weixin.sdk.message.MessageLink;
import com.qq.weixin.sdk.message.MessageLocation;
import com.qq.weixin.sdk.message.MessageText;
import com.qq.weixin.sdk.messageHadler.MessageHandlerHelper;
import com.qq.weixin.sdk.messageHadler.MessageHandlerEvent;
import com.qq.weixin.sdk.messageHadler.MessageHandlerImage;
import com.qq.weixin.sdk.messageHadler.MessageHandlerLink;
import com.qq.weixin.sdk.messageHadler.MessageHandlerLocation;
import com.qq.weixin.sdk.messageHadler.MessageHandlerText;
import com.qq.weixin.sdk.messageResultHadler.MessageResultHandlerHelper;
import com.qq.weixin.sdk.messageResultHadler.MessageResultHandlerMusic;
import com.qq.weixin.sdk.messageResultHadler.MessageResultHandlerNews;
import com.qq.weixin.sdk.messageResultHadler.MessageResultHandlerText;

/**
 * weixin tool class
 * 
 * @author hujiawei
 * 
 */
public class WeixinUtil implements IMessage {

	private InputStream is;//inputstream of request
	private Message message;//message comes from
	private PrintWriter writer;//printwriter of response
	private Message messageResult;//message will return
	private MessageHandlerHelper messageHadler;//handle message
	private MessageResultHandlerHelper messageResultHandler;//handle result message

	// deal the message from user
	public void dealMessage(InputStream is, PrintWriter writer) {
		this.is = is;
		this.writer = writer;
		parseInputStreamToMessage();
		messageResult = messageHadler.handleMessage(message);
		writeMessageResult();
	}

	// write the result message
	private void writeMessageResult() {
		if (messageResult.getMsgType().equalsIgnoreCase(MESSAGE_RESULT_TEXT)) {
			messageResultHandler = new MessageResultHandlerText();
		} else if (messageResult.getMsgType().equalsIgnoreCase(MESSAGE_RESULT_NEWS)) {
			messageResultHandler = new MessageResultHandlerNews();
		} else if (messageResult.getMsgType().equalsIgnoreCase(MESSAGE_RESULT_MUSIC)) {
			messageResultHandler = new MessageResultHandlerMusic();
		}
		writer.print(messageResultHandler.buildMessageResult(messageResult));
	}

	// parse the message content to Message
	private void parseInputStreamToMessage() {
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		try {
			Document document = factory.newDocumentBuilder().parse(is);
			Element root = document.getDocumentElement();
			String type = (root.getElementsByTagName(TAG_MSGTYPE)).item(0).getTextContent();// filter CDATA... -- text/image/...
			if (type.equalsIgnoreCase(MESSAGE_TEXT)) {
				message = new MessageText();
				messageHadler = new MessageHandlerText();
			} else if (type.equalsIgnoreCase(MESSAGE_EVENT)) {
				message = new MessageEvent();
				messageHadler = new MessageHandlerEvent();
			} else if (type.equalsIgnoreCase(MESSAGE_IMAGE)) {
				message = new MessageImage();
				messageHadler = new MessageHandlerImage();
			} else if (type.equalsIgnoreCase(MESSAGE_LINK)) {
				message = new MessageLink();
				messageHadler = new MessageHandlerLink();
			} else if (type.equalsIgnoreCase(MESSAGE_LOCATION)) {
				message = new MessageLocation();
				messageHadler = new MessageHandlerLocation();
			}
			messageHadler.parseMessage(message, root);// do the default/common parse!
		} catch (SAXException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (ParserConfigurationException e) {
			e.printStackTrace();
		}
	}

	public InputStream getIs() {
		return is;
	}

	public void setIs(InputStream is) {
		this.is = is;
	}

	public PrintWriter getWriter() {
		return writer;
	}

	public void setWriter(PrintWriter writer) {
		this.writer = writer;
	}

	public Message getMessage() {
		return message;
	}

	public void setMessage(Message message) {
		this.message = message;
	}

	public MessageHandlerHelper getMessageHadler() {
		return messageHadler;
	}

	public void setMessageHadler(MessageHandlerHelper messageHadler) {
		this.messageHadler = messageHadler;
	}

	public Message getMessageResult() {
		return messageResult;
	}

	public void setMessageResult(Message messageResult) {
		this.messageResult = messageResult;
	}

	public MessageResultHandlerHelper getMessageResultHandler() {
		return messageResultHandler;
	}

	public void setMessageResultHandler(MessageResultHandlerHelper messageResultHandler) {
		this.messageResultHandler = messageResultHandler;
	}

}
